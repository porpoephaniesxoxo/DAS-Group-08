---
title: "An Analysis of Factors Influencing High IMDB Ratings"
author: "Group 8"
number-sections: true
format: 
  html:
    embed-resources: true
    code-tools: true
  pdf: default
editor_options:
  chunk_output_type: console
execute: 
  echo: false
  eval: true
  warning: false
  message: false
---

# Data Description

```{=tex}
\textbf{Source}: IMDB film database

\textbf{Description of variables:}
\begin{itemize}
  \item \texttt{film\_id}: Unique identifier
  \item \texttt{year}: Year of release
  \item \texttt{length}: Duration (minutes)
  \item \texttt{budget}: Production budget (in \$10 million)
  \item \texttt{votes}: Number of viewer votes
  \item \texttt{genre}: Genre of the film
  \item \texttt{rating}: IMDB score from 0--10
\end{itemize}

\textbf{Total observations}: 2,847 films

\textbf{Objective of the analysis}: To determine which factors of films are associated with an IMDB rating above 7 by using a Generalised Linear Model (GLM).
```

```{r}
#| echo: false
#| warning: false
#| message: false
library(ggplot2)
library(tidyverse)
library(gt)
library(dplyr)

```

# Data Preparing & Cleaning

## Data Cleaning
```{r}
#| echo: true
# Load dataset
raw_data <- read.csv("dataset08.csv")

# Preview the structure of the dataset
glimpse(raw_data)

# Remove rows that have missing values in 'length'variable
clean_data <- raw_data %>%
  filter(!is.na(length))

# Convert 'genre' to factor for categorical analysis
clean_data$genre <- as.factor(clean_data$genre)

# Define a function to create new binary response variable 'rating_above7'
rating_rank <- function(rating_column, threshold = 7){
  ifelse(rating_column > threshold, 1, 0)
}
#check the range of 'year' variable
range(clean_data$year) #we can see that range is between 1898 and 2005
# Mutate new variables : binary outcome 'rating_above_7' & 'decade_group'
clean_data <- clean_data %>%
  mutate(
    rating_above_7 = rating_rank(rating),
    decade_group = cut(year, 
                     breaks = c(1890, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010), 
                     labels = c("1890s-1920s", "1930s", "1940s", "1950s", "1960s", "1970s", "1980s", "1990s", "2000s"),
                     right=FALSE)
  )
#check the missing values in 'budget' & 'votes' variables
sum(is.na(clean_data$budget)) # 0 missing values
sum(is.na(clean_data$votes)) # 0 missing values

#Visualize the distribution of 'budget'
#If distribution is heavily skewed, log-transformation might be needed
ggplot(clean_data, aes(x = budget)) + 
  geom_histogram(bins = 30, fill = "violet") + 
  labs(title = "Distribution of Budget")
#Interpretation:
#The 'budget' variable appears approximately normally distributed.

#Visualize the distribution of 'votes'
ggplot(clean_data, aes(x = votes)) + 
  geom_histogram(bins = 30, fill = "violetred") + 
  labs(title = "Distribution of votes")
#Interpretation:
#The 'votes' variable is highly right-skewed.
#A log-transformation should be applied before using this variable in modelling.
```
## Train-Test Splitting
```{r}
#| echo: true
set.seed(69)
# From this part, we split into 60/40
# A larger test set (40%) allows for more reliable model evaluation
train_data_index <- sample(seq_len(nrow(clean_data)), size = 0.6 * nrow(clean_data))

train_data <- clean_data[train_data_index, ]
test_data <- clean_data[-train_data_index, ]
```


# Exploratory Data Analysis (EDA)

```{r}

```

# Statistical Modelling

```{r}

```

# Model Diagnostics

```{r}

```

# Conclusions
