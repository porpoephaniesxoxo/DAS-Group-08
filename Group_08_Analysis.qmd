---
title: "An Analysis of Factors Influencing High IMDB Ratings"
author: "Group 8"
number-sections: true
format: 
  html:
    embed-resources: true
    code-tools: true
  pdf: default
editor_options:
  chunk_output_type: console
execute: 
  echo: false
  eval: true
  warning: false
  message: false
---

# Data Description

```{=tex}
\textbf{Source}: IMDB film database

\textbf{Description of variables:}
\begin{itemize}
  \item \texttt{film\_id}: Unique identifier
  \item \texttt{year}: Year of release
  \item \texttt{length}: Duration (minutes)
  \item \texttt{budget}: Production budget (in \$10 million)
  \item \texttt{votes}: Number of viewer votes
  \item \texttt{genre}: Genre of the film
  \item \texttt{rating}: IMDB score from 0--10
\end{itemize}

\textbf{Total observations}: 2,847 films

\textbf{Objective of the analysis}: To determine which factors of films are associated with an IMDB rating above 7 by using a Generalised Linear Model (GLM).
```
```{r}
#| echo: false
#| warning: false
#| message: false
library(ggplot2)
library(tidyverse)
library(gt)
library(dplyr)
library(MASS)
library(pROC)
library(caret)
library(car)
```

# Data Preparing & Cleaning

```{r}
#| echo: true
# Load dataset
raw_data <- read.csv("dataset08.csv")

# Preview the structure of the dataset
glimpse(raw_data)

# Remove rows that have missing values in 'length'variable
clean_data <- raw_data %>%
  filter(!is.na(length))

# Convert 'genre' to factor for categorical analysis
clean_data$genre <- as.factor(clean_data$genre)

# Define a function to create new binary response variable 'rating_above7'
rating_rank <- function(rating_column, threshold = 7){
  ifelse(rating_column > threshold, 1, 0)
}
#check the range of 'year' variable
range(clean_data$year) #we can see that range is between 1898 and 2005
# Mutate new variables : binary outcome 'rating_above_7' & 'decade_group'
clean_data <- clean_data %>%
  mutate(
    rating_above_7 = rating_rank(rating),
    decade_group = cut(year, 
                     breaks = c(1890, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010), 
                     labels = c("1890s-1920s", "1930s", "1940s", "1950s", "1960s", "1970s", "1980s", "1990s", "2000s"),
                     right=FALSE)
  )
#check the missing values in 'budget' & 'votes' variables
sum(is.na(clean_data$budget)) # 0 missing values
sum(is.na(clean_data$votes)) # 0 missing values

#Visualize the distribution of 'budget'
#If distribution is heavily skewed, log-transformation might be needed
ggplot(clean_data, aes(x = budget)) + 
  geom_histogram(bins = 30, fill = "violet") + 
  labs(title = "Distribution of Budget", x = "Budget (in $10 million)")
#Interpretation:
#The 'budget' variable appears approximately normally distributed.

#Visualize the distribution of 'votes'
ggplot(clean_data, aes(x = votes)) + 
  geom_histogram(bins = 30, fill = "violetred") + 
  labs(title = "Distribution of votes", x = "Number of viewer votes")
#Interpretation:
#The 'votes' variable is highly right-skewed.
#A log-transformation should be applied before using this variable in modelling.
```

# Exploratory Data Analysis (EDA)

## Data Overview

From the data overview, we will build summary statistics for both numeric and categorical variables to explore the general characteristics and ranges within the dataset. We highlight the key variables that are particularly interesting to explore for our objective

```{r}
#| echo: true
#| message: false
#| warning: false
library(gt)
library(dplyr)
library(tidyr)
#Built the summary statistics table for Numeric Variables by create function
make_table <- function(data, name, label = NULL) {
  if (is.null(label)) label <- name
  summary_table <- data %>%
    group_by(rating_above_7) %>%
    summarize(
      Mean = mean(.data[[name]], na.rm = TRUE),
      Median = median(.data[[name]], na.rm = TRUE),
      `Std. Dev` = sd(.data[[name]], na.rm = TRUE),
      Minimum = min(.data[[name]], na.rm = TRUE),
      Maximum = max(.data[[name]], na.rm = TRUE),
      IQR = IQR(.data[[name]], na.rm = TRUE),
      `Sample Size` = n(),
      .groups = "drop") %>%
    pivot_longer(-rating_above_7, names_to = "Statistic", values_to = "Value") %>%
    pivot_wider(names_from = rating_above_7, values_from = "Value",
                names_prefix = "Rating > 7 = ") %>% gt() %>%
    fmt_number(columns = starts_with("Rating"), decimals = 2) %>%
    cols_label(
      Statistic = "Statistic",
      `Rating > 7 = 0` = "Rating <= 7",
      `Rating > 7 = 1` = "Rating > 7") 
    summary_table %>% as_latex() %>% as.character() %>% cat()}
#Built the summary statistics table for Categorical Variables by create function
make_cat_table <- function(data, cat, group_var = "rating_above_7", var_label = NULL) {
  if (is.null(var_label)) var_label <- cat_var
  group_sym <- sym(group_var)
  cat_sym <- sym(cat)
  tab <- data %>%
    group_by(!!group_sym, !!cat_sym) %>%
    summarize(Count = n(), .groups = "drop") %>%
    group_by(!!group_sym) %>%
    mutate(Percentage = Count / sum(Count) * 100) %>%
    pivot_wider(
      names_from = !!group_sym,
      values_from = c(Count, Percentage),
      names_sep = "_") %>%
    rename(Category = !!cat_sym)
  tab %>% gt() %>% fmt_number(columns = where(is.numeric), decimals = 2) %>%
    cols_label(
      Category = "Category",
      Count_0 = "Count (<= 7)",
      Count_1 = "Count (> 7)",
      Percentage_0 = "% (<= 7)",
      Percentage_1 = "% (> 7)"
    ) %>% as_latex() %>% as.character() %>% cat()}
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: asis
#| tbl-pos: H
#| tbl-cap: Summary Statistics table of Length (minutes)
#| tbl-align: center 
#| label: tbl-length
# Length Table
make_table(clean_data, "length", "Length (minutes)")
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: asis
#| tbl-pos: H
#| tbl-cap: Summary Statistics table of Budget(in $10 million)
#| tbl-align: center 
#| label: tbl-budget
# Budget Table
make_table(clean_data, "budget", "Budget (in $10 million)")
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: asis
#| tbl-pos: H
#| tbl-cap: Summary Statistics table of Votes
#| tbl-align: center 
#| label: tbl-votes
# Votes Table
make_table(clean_data, "votes", "Number of Votes")
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: asis
#| tbl-pos: H
#| tbl-cap: Summary Statistics table of Rating (IMDB score)
#| tbl-align: center
#| label: tbl-rating 
# Rating Table
make_table(clean_data, "rating", "IMDB score")
```

```{r}
#| echo: true
#| results: asis
#| message: false
#| warning: false
#| tbl-pos: H
#| tbl-cap: Summary Statistics table of Genre
#| tbl-align: center 
#| label: tbl-genre
# Film Genre Table
make_cat_table(clean_data, "genre", var_label = "Film Genre")
```

```{r}
#| echo: true
#| results: asis
#| message: false
#| warning: false
#| tbl-pos: H
#| tbl-cap: Summary Statistics table of Decade Group
#| tbl-align: center 
#| label: tbl-decade
# Decade Group Table
make_cat_table(clean_data, "decade_group", var_label = "Decade Group")
```

The summary statistics provide a general overview of the dataset and the key characteristic's variables.

-   **Length**: As shown in @tbl-length, Films with high IMDB scores (rating \> 7) have a lower average length (mean = 56.8 mins) compared to the films with low IMDB scores (rating \<= 7)(mean = 95.1 mins).

-   **Budget**: As shown in @tbl-budget, There is only a small difference in average production budgets between films with high IMDB scores (rating \> 7)(mean = 12.9) and films with low IMDB scores (rating \<= 7)(mean = 11.35).

-   **Votes**: As shown in @tbl-votes, Films with high IMDB scores (rating \> 7) have a lower average votes (mean = 387.46) compared to the films with low IMDB scores (rating \<= 7)(mean = 824.81).

-   **Rating**: As shown in @tbl-rating, The sample size of the films with low IMDB scores (rating \<= 7)(Sample Size = 1801) is higher than films with high IMDB scores (rating \> 7)(Sample Size = 915).

-   **Genre**: As shown in @tbl-genre, Comedy appears more frequently in films with high IMDB scores (rating \> 7), while Romance is found only among films with lower scores (rating â‰¤ 7).

-   **Decade Group**: As shown in @tbl-decade, A significant proportion of films with high IMDB scores (rating \> 7) are from the 1990s and 2000s.

## Target Variable Exploration

In this section, we explore the distribution of our target variable (rating_above_7) using a simple bar plot to observe its overall balance.

```{r}
#| fig-cap: "Bar plot of our Target Variable"
#| fig-align: center
#| fig-width: 3
#| fig-height: 3
#| echo: true
#| message: false
#| warning: false
#| fig-pos: H
#| label: fig-target
ggplot(clean_data, aes(x = as.factor(rating_above_7)))+
  geom_bar(fill = "aquamarine4")+
  labs(x = "Rating > 7",
       y = "Count",
       title = "Distribution of Target Variable")+
  theme_bw()
```

As shown in @fig-target, there is a clear imbalance in the distribution of our target variable(rating_above). This suggests that model evaluation's part may take this imbalance into the account. Therefore this plot highlights the importance of being aware of this concern when building models.


## Bivariate Analysis with target
In this section, we focus on the relationships among explanatory variables, as well as their associations with the target variable.

### Relationships Between Numerical Predictors and Target Variable
```{r}
#| fig-cap: "Distribution of Votes Binned into Quantiles by IMDB Rating Group"
#| fig-align: center
#| fig-width: 3
#| fig-height: 3
#| echo: true
#| message: false
#| warning: false
#| fig-pos: H
#| label: fig-voterating
clean_data %>%
  mutate(votes_bin = ntile(votes, 8)) %>%
  group_by(rating_above_7, votes_bin) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(rating_above_7) %>%
  mutate(perc = n / sum(n) * 100) %>%
  ggplot(aes(x = as.factor(rating_above_7), y = perc, fill = as.factor(votes_bin))) +
  geom_col() +
  geom_text(aes(label = round(perc, 1)), position = position_stack(vjust = 0.5), size = 3) +
  labs(
    x = "Rating > 7",
    y = "Percentage",
    fill = "Votes Bin") +
  theme_bw()
```
As shown in @fig-voterating, the chart shows the distribution of vote counts, divided into 8 quantile-based bins by rating group(Rating <= 7 and Rating >7).

The bin number reflects the relative number of votes, with Bin 1 representing the lowest and Bin 8 the highest.

We can observe that the lower vote bins(Bin1-3) are common among films with high IMDB scores (rating > 7). In contrast, films with low IMDB scores (rating <= 7) tend to appear more in high votes, as shown in bin 7 and 8.

However, we found that votes variable was found to be highly skewed, suggesting the plot might still not fully reflect the actual imbalance of vote in raw scale.


```{r}
#| fig-cap: "Relationship between Film Length and Budget by IMDB Rating Group"
#| fig-align: center
#| fig-width: 5
#| fig-height: 3
#| echo: true
#| message: false
#| warning: false
#| fig-pos: H
#| label: fig-scatlenbudget
ggplot(clean_data, aes(x = budget, y = length, color = as.factor(rating_above_7))) +
  geom_point(alpha = 0.6) +
  scale_color_manual(
    values = c("0" = "darkorange",
               "1" = "darkorchid"),
    labels = c("<= 7", "> 7"))+
  labs(
    x = "Budget (in $10 million)",
    y = "Film Length (minutes)",
    color = "IMDB Scores") +
  theme_bw()
```
As shown in @fig-scatlenbudget,there is no strong linear relationship between the film length and budget across rating group. However, we can observe a clear separation between the two groups. Films with high IMDB scores (rating > 7) tend to cluster within 50 - 150 minutes in length and have budgets around $100 -150 million. In contrast, films with low IMDB scores (rating <= 7) tend to cluster under 100 minutes, while their budgets remain in a similar range to films with high IMDB scores (rating > 7).


```{r}
#| fig-cap: "Relationship between Film Length and IMDB score by IMDB Rating Group"
#| fig-align: center
#| fig-width: 5
#| fig-height: 3
#| echo: true
#| message: false
#| warning: false
#| fig-pos: H
#| label: fig-scatlenrating
ggplot(clean_data, aes(x = rating, y = length, color = as.factor(rating_above_7))) +
  geom_point(alpha = 0.6) +
  scale_color_manual(
    values = c("0" = "darkorange",
               "1" = "darkorchid"),
    labels = c("<= 7", "> 7"))+
  labs(
    x = "IMDB score from 0â€“10",
    y = "Film Length (minutes)",
    color = "IMDB Scores") +
  theme_bw()
```

As shown in @fig-scatlenrating, there are no clear relationship between the film length and IMDB score across rating group. However, the plot clearly reflects the separation at a rating of 7. Notably, films with low IMDB scores (rating <= 7) tend to have more variation in film length, including several outliers with unusually long durations. In contrast,the films with high IMDB scores(rating > 7) are more tightly clustered.


### Categorical Predictors vs Target Variable

```{r}
#| fig-cap: "Stacked Bar plot of between Genre of the film and IMDB score"
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
#| fig-pos: H
#| echo: true
#| message: false
#| warning: false
#| label: fig-genrerating

ggplot(clean_data, aes(x= genre, fill = as.factor(rating_above_7))) +
  geom_bar(position = "fill", alpha = 0.6) +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_fill_manual(
    values = c("0" = "darkorange",
               "1" = "darkorchid"),
    labels = c("<= 7", "> 7"))+
  labs(x = "Genre", 
       y = "Proportion",
       fill = "IMDB Scores")+
  theme_bw()
```

As shown in @fig-genrerating,the plot illustrates the proportion of films with high IMDB scores(rating > 7) and films with low IMDB scores (rating <= 7) across different genres. Genres such as Documentary, Short, and Animation have a higher proportion of high-rated films. In contrast, Drama, Action, and Romance tend to have fewer high-rated films. Moreover, Comedy shows a more balanced distribution, making it less clear to classify.



```{r}
#| fig-cap: "Stacked Bar plot of between Year in Decade and IMDB score"
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
#| fig-pos: H
#| echo: true
#| message: false
#| warning: false
#| label: fig-decaderating
ggplot(clean_data, aes(x = decade_group, fill = as.factor(rating_above_7)))+
  geom_bar(position = "fill", alpha = 0.6) +
scale_y_continuous(labels = scales::percent_format()) +
  scale_fill_manual(
    values = c("0" = "darkorange", "1" = "darkorchid"),
    labels = c("<= 7", "> 7")) +
  labs(
    x = "Decade Group",
    y = "Proportion",
    fill = "IMDB Scores") +
  theme_bw()
```

As shown in @fig-decaderating, representing the proportion of films with high IMDB scores(rating > 7) and films with low IMDB scores (rating <= 7) across different decades. In this plot, it's difficult to draw strong conclusions from decade-based trends, as the proportions remain fairly similar. However, one notable exception is the 2000s, which show a higher proportion of high-rated films compared to earlier decades.

```{r}
#| fig-cap: "Boxplots comparing Film Length and Budget across IMDB Rating Groups"
#| fig-align: center
#| fig-width: 12
#| fig-height: 5
#| fig-pos: H
#| echo: true
#| message: false
#| warning: false
#| label: fig-twoboxplot
library(patchwork)
#Boxplot : Length vs Rating
p1 <- ggplot(clean_data, aes(x = as.factor(rating_above_7),
                       y = length,
                       fill = as.factor(rating_above_7))) +
  geom_boxplot(alpha = 0.6) +
  scale_fill_manual(values = c("0" = "darkorange",
                               "1" = "darkorchid"),
                    labels = c("<=7", "> 7"))+
  labs(x = "Rating Groups",
       y = "Film Length (minutes)",
       fill = "IMDB Scores") +
  theme_bw()

#Boxplot : Budget vs Rating
p2 <- ggplot(clean_data, aes(x = as.factor(rating_above_7),
                       y = budget,
                       fill = as.factor(rating_above_7))) +
  geom_boxplot(alpha = 0.6) +
  scale_fill_manual(values = c("0" = "darkorange",
                               "1" = "darkorchid"),
                    labels = c("<= 7", "> 7"))+
  labs(x = "Rating Groups",
       y = "Budget (in $10 million)",
       fill = "IMDB Scores") +
  theme_bw()
#combine the two plots
p1+p2
```

As shown in @fig-twoboxplot, these two boxplots compare film length and budget between films with high IMDB scores (rating > 7) and those with lower scores (rating â‰¤ 7). For film length, although high-rated films tend to have a lower median, they also show a wider range in length. In Budget part, we can observe that films with higher ratings generally have a slightly higher median budget, suggesting that larger budgets might be related with better ratings. 


```{r}
#| fig-cap: "Line chart of average IMDB scores over time for each genre"
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
#| fig-pos: H
#| echo: true
#| message: false
#| warning: false
#| label: fig-line

clean_data %>%
  group_by(year, genre) %>%
  summarize(mean_rating = mean(rating), .groups = "drop") %>%
  ggplot(aes(x = year, y = mean_rating, color = as.factor(genre)))+
  geom_line(linewidth = 0.6) +
  geom_hline(yintercept = 7, linetype = "dashed", color = "gray40")+
  labs(x = "Year",
       y = "Average Rating",
       color = "Genre")+
  theme_bw()

```
As shown in @fig-line, the line chart illustrates the trend of average IMDB scores over time for each genre. Each line represents how a genre's average rating changed across the years. Documentary and Short often maintain higher average ratings, while Drama and Romance tend to remain below threshold of 7(indicated by the dashed line).


```{r}
#| fig-cap: "Boxplot of IMDB Ratings by Genre and IMDB Rating Group "
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
#| fig-pos: H
#| echo: true
#| message: false
#| warning: false
#| label: fig-boxgenre

ggplot(clean_data, aes(x = as.factor(rating_above_7), y = rating, fill = genre)) +
  geom_boxplot(alpha = 0.7, position = position_dodge2(preserve = "single")) +
  labs(
    x = "Rating > 7",
    y = "IMDB score from 0â€“10",
    fill = "Genre") +
  theme_bw()
```

As shown in @fig-boxgenre, the boxplot displays the distribution of IMDB scores across the different genre by spliting into films with high IMDB scores (rating > 7) and films with low IMDB scores (rating <= 7). We observe that this plot reflects separation clearly between the two groups due to the threshold of 7, as expected from the target variable definition.

```{r}
#| fig-cap: "Density plot of Viewer Votes by IMDB Rating Group"
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
#| fig-pos: H
#| echo: true
#| message: false
#| warning: false
#| label: fig-density

ggplot(clean_data, aes(x = log(votes +1) , fill = as.factor(rating_above_7))) +
  geom_density(alpha = 0.6) +
  scale_fill_manual(values = c("0" = "darkorange", "1" = "darkorchid"),
                    labels = c("<= 7", "> 7")) +
  labs( x = "Number of Votes",
        y = "Density",
        fill = "IMDB Scores") +
        theme_bw()
```
As shown in @fig-density, the density plot displays the distribution of the number of votes for films with films with high IMDB scores (rating > 7) compared to films with low IMDB scores (rating <= 7). This plot can complements @fig-voterating by providing a smoother and more continuous view of the vote distribution across rating groups.


## Correlation Matrix

```{r}
#| fig-cap: "Correlation Heatmap of numeric variables"
#| fig-align: center
#| fig-width: 4
#| fig-height: 4
#| fig-pos: H
#| echo: true
#| message: false
#| warning: false
#| label: fig-heatmap
library(corrplot)
# Computed correlation matrix from numeric variables
cor_matrix <- cor(clean_data[, c("length", "budget", "votes", "rating")], use = "complete.obs")
# Draw a correlation Heatmap by 'ggplot'
corrplot(cor_matrix, method = "color", 
         addCoef.col = "black",    
         tl.col = "black",        
         tl.cex = 0.8,            
         number.cex = 0.7)
```

As shown in @fig-heatmap, this plot shows the correlation between numeric variables. We can see that there is no strong correlation between any pairs of variables, since all values are below 0.5. One thing to notice is that film length has the highest absolute correlation (around -0.46), which suggests a moderate negative relationship, meaning that longer films may tend to get lower ratings. For budget, the correlation is quite weak, so it may not be meaningful to interpret it on its own. Lastly, votes show a very low correlation (around -0.05), which might suggest that we should consider applying a transformation before using it in modeling.

# Statistical Modelling

In this section, we will perform the modelling of the generalised linear model.

From the visualisation results, the votes variables show a right-skewed (skewed distribution), so a log transformation is needed before modelling:

```{r}
#| echo: true

#Performs a log transformation on the votes variable
clean_data=clean_data%>%
  mutate(log_votes=log(votes+1)) #Avoiding the log(0) problem
```

Firstly, to test whether year should be put into the model as a continuous or grouped variable, we fitted a model for each and observed their AIC values:

```{r}
#| echo: true

#Fitting the GLM logistic regression model
glm_model=glm(rating_above_7~length+log_votes+budget+genre+year, 
                 data=clean_data, 
                 family=binomial(link="logit"))
summary(glm_model)
glm_model1=glm(rating_above_7~length+log_votes+budget+genre+decade_group, 
                 data=clean_data, 
                 family=binomial(link="logit"))
summary(glm_model1)
AIC(glm_model,glm_model1)
```

From the results, the model with year as a continuous variable has lower AIC values and significant variables, so we will use this model for subsequent stepwise regressions.

```{r}
#| echo: true

#Stepwise regression
best_model=stepAIC(glm_model,direction="both")
summary(best_model)
AIC(glm_model,best_model)
```

After the stepwise regression method, it is found that the AIC of the model is the same as the original model, but some of the variables of the original model are not significant, after that we will continue to search for the best model by eliminating the non-significant variables.

```{r}
#| echo: true

#Model selection by removing insignificant variables
clean_data_selected=clean_data%>% 
  filter(genre%in%c("Comedy","Documentary","Drama","Short"))
glm_model_reduced=glm(rating_above_7~length+log_votes+budget+genre+year,
                      family=binomial(link="logit"),data=clean_data_selected)
summary(glm_model_reduced)
```

From the results, log_votes and genreShort are still not significant and we will continue with the culling.

```{r}
#| echo: true

#Model selection by removing insignificant variables
clean_data_selected=clean_data%>% 
  filter(genre%in%c("Comedy","Documentary","Drama"))
glm_model_reduced1=glm(rating_above_7~length+budget+genre+year,
                       family=binomial(link="logit"),data=clean_data_selected)
summary(glm_model_reduced1)
AIC(glm_model_reduced,glm_model_reduced1)
```

After this exclusion, the resulting model variables were all significant and had the smallest AIC values, and we will use the model for subsequent evaluations.

# Model Diagnostics

In this section, we will perform model diagnostics on the resulting model.

First we will look at the goodness-of-fit of the model by calculating the pseudo RÂ²:

```{r}
#| echo: true

#Evaluating the goodness-of-fit of the model
#Pseudo RÂ²
pR2=1-(glm_model_reduced1$deviance/glm_model_reduced1$null.deviance)
print(pR2)
```

In GLM (logistic regression), the pseudo RÂ² can be used to measure the explanatory power: as can be seen from the results, the pseudo RÂ² is 0.60, which proves that the model has some explanatory power.

Next, we will perform a residual analysis:

```{r}
#| echo: true

#Residual Analysis
#Getting the residuals
residuals_data=data.frame(Index=1:length(residuals(glm_model_reduced1)), 
                          Residuals=residuals(glm_model_reduced1,type="deviance"))
```

```{r}
#| echo: true
#| label: fig-res
#| fig-cap: Residual Plot with LOESS Smoothing
#| fig-align: center
#| fig-pos: H

#Plotting Residuals and Trendlines
ggplot(residuals_data,aes(x=Index,y=Residuals))+
  geom_point(alpha=0.5,color="black")+
  geom_smooth(method="loess",color="red",se=FALSE)+
  labs(x="Index",y="Deviance Residuals")+
  theme_minimal()
```

```{r}
#| echo: true
#| label: fig-hist
#| fig-cap: Histogram of Residuals
#| fig-align: center
#| fig-pos: H

#Plotting Histogram of Residuals
ggplot(residuals_data,aes(x=Residuals))+
  geom_histogram(bins=30,col="white",fill="lightblue")+
  labs(x="Residuals",y="Count")
```

The two residual plots show that the model is overall good and acceptable.

Next we will calculate the ROC curve and AUC values to observe the predictive power of the model.

```{r}
#| echo: true

#Assessment of predictive capacity
#predictive probability
pred_probs=predict(glm_model_reduced1,type="response")
```

```{r}
#| echo: true
#| label: fig-ROC
#| fig-cap: Plot of ROC
#| fig-align: center
#| fig-pos: H

#Calculate ROC curve & AUC
roc_obj=roc(clean_data_selected$rating_above_7,pred_probs)
plot(roc_obj,col="blue")
```

```{r}
#| echo: true

auc(roc_obj)  #View AUC values
```

Area under the curve is 0.9544, which means ths model is good.

```{r}
#| echo: true

#Calculate the confusion matrix
pred_class=ifelse(pred_probs>0.5,1,0)
conf_matrix=confusionMatrix(as.factor(pred_class),as.factor(clean_data_selected$rating_above_7))
print(conf_matrix)
```

By calculating the confusion matrix, Accuracy = 88%, the model predicts more accurately overall and the model performs well and can be used for further analysis or optimisation.

```{r}
#| echo: true

#Multicollinearity check
vif(glm_model_reduced1)
```

In the model, the VIF values of all the variables are close to 1, indicating that there is little or no covariance between these variables. Therefore, the model is stable with respect to multicollinearity and no further treatment of covariance is required.

# Conclusions
